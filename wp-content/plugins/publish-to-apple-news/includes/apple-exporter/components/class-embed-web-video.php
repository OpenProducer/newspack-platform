<?php
/**
 * Publish to Apple News Components: Embed_Web_Video class
 *
 * @package Apple_News
 * @subpackage Apple_Exporter
 * @since 0.2.0
 */

namespace Apple_Exporter\Components;

use Apple_Exporter\Components\Component;

/**
 * An embedded video from Youtube or Vimeo, which are the only two providers that Apple supports.
 *
 * @since 0.2.0
 */
class Embed_Web_Video extends Component {

	/**
	 * Regex pattern for a Vimeo video.
	 */
	const VIMEO_MATCH = '#^(https?:)?//(?:.+\.)?vimeo\.com/(:?.+/)?(\d+)(?:\?.*)*$#';

	/**
	 * Regex pattern for a YouTube video.
	 */
	const YOUTUBE_MATCH = '#^https?://(?:www\.)?(?:youtube\.com/((watch\?v=)|(embed/))([\w\-]+)|youtu\.be/([\w\-]+))[^ ]*$#';

	/**
	 * Test if this node is a match based on the node type and URL format.
	 *
	 * @param \DOMElement $node    The node to examine for matches.
	 * @param string      $pattern The regex pattern to match against.
	 * @access public
	 * @return boolean
	 */
	public static function is_embed_web_video( $node, $pattern ) {
		return (
			( 'p' === $node->nodeName && preg_match( $pattern, trim( $node->nodeValue ) ) )
			|| ( 'iframe' === $node->nodeName && preg_match( $pattern, trim( $node->getAttribute( 'src' ) ) ) )
			|| ( 'figure' === $node->nodeName && Component::is_embed_figure( $node ) && preg_match( $pattern, trim( $node->nodeValue ) ) )
		);
	}

	/**
	 * Look for node matches for this component.
	 *
	 * @param \DOMElement $node The node to examine for matches.
	 * @access public
	 * @return \DOMElement|null The node on success, or null on no match.
	 */
	public static function node_matches( $node ) {

		// Handling for a Gutenberg web video embed.
		if (
			'figure' === $node->nodeName
			&& ( self::node_has_class( $node, 'wp-block-embed-vimeo' )
				|| self::node_has_class( $node, 'wp-block-embed-youtube' )
			)
		) {
			return $node;
		}

		// Is this node valid for further processing?
		if ( self::is_embed_web_video( $node, self::YOUTUBE_MATCH )
			|| self::is_embed_web_video( $node, self::VIMEO_MATCH )
		) {
			return $node;
		}

		return null;
	}

	/**
	 * Register all specs for the component.
	 *
	 * @access public
	 */
	public function register_specs() {
		$this->register_spec(
			'json',
			__( 'JSON', 'apple-news' ),
			array(
				'role'        => 'embedwebvideo',
				'aspectRatio' => '#aspect_ratio#',
				'URL'         => '#url#',
				'layout'      => 'embed-web-video-layout',
			)
		);

		// Register the JSON for the link button layout.
		$this->register_spec(
			'embed-web-video-layout',
			__( 'Web Embed Layout', 'apple-news' ),
			array(
				'margin' => array(
					'bottom' => 18,
					'top'    => 18,
				),
			)
		);
	}

	/**
	 * Build the component.
	 *
	 * @param string $html The HTML to parse into text for processing.
	 * @access protected
	 */
	protected function build( $html ) {
		$aspect_ratio = 1.777;
		$src          = null;
		$url          = null;

		// If a paragraph was matched, it's because it contains a EWV URL.
		// The URL could be linked if it was generated by the [embed] shortcode.
		//
		// If it's an iframe, just get the src attribute.
		if ( preg_match( '#<p(.*?)>(<a(.*?)>)?(.*?)(</a>)?</p>#', $html, $matches ) ) {
			$url = trim( $matches[4] );
		} elseif ( preg_match( '#<iframe(.*?)src="(.*?)"(.*?)>#', $html, $matches ) ) {
			$url = trim( $matches[2] );
		}

		if ( ! empty( $url ) ) {
			if ( preg_match( self::YOUTUBE_MATCH, $url, $matches ) ) {
				$src = 'https://www.youtube.com/embed/' . end( $matches );
			} elseif ( preg_match( self::VIMEO_MATCH, $url, $matches ) ) {
				$src = 'https://player.vimeo.com/video/' . end( $matches );
			} else {
				// If we haven't matched against a YouTube or Vimeo URL, bail.
				return;
			}
		}

		$this->register_json(
			'json',
			array(
				'#aspect_ratio#' => round( floatval( $aspect_ratio ), 3 ),
				'#url#'          => $src,
			)
		);

		// Register the layout for the link button.
		$this->register_layout( 'embed-web-video-layout', 'embed-web-video-layout' );
	}
}
