{"version":3,"file":"interactivity-router/index.min.js","mappings":"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","sources":["webpack://wp/external import \"@wordpress/a11y\"","webpack://wp/webpack/bootstrap","webpack://wp/webpack/runtime/define property getters","webpack://wp/webpack/runtime/hasOwnProperty shorthand","webpack://wp/external module \"@wordpress/interactivity\"","webpack://wp/./packages/interactivity-router/build-module/@wordpress/interactivity-router/src/index.ts"],"sourcesContent":["module.exports = import(\"@wordpress/a11y\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var x = (y) => {\n\tvar x = {}; __webpack_require__.d(x, y); return x\n} \nvar y = (x) => (() => (x))\nconst __WEBPACK_NAMESPACE_OBJECT__ = x({ [\"getConfig\"]: () => (__WEBPACK_EXTERNAL_MODULE__wordpress_interactivity_8e89b257__.getConfig), [\"privateApis\"]: () => (__WEBPACK_EXTERNAL_MODULE__wordpress_interactivity_8e89b257__.privateApis), [\"store\"]: () => (__WEBPACK_EXTERNAL_MODULE__wordpress_interactivity_8e89b257__.store) });","/**\n * WordPress dependencies\n */\nimport { store, privateApis, getConfig } from '@wordpress/interactivity';\n\nconst {\n\tdirectivePrefix,\n\tgetRegionRootFragment,\n\tinitialVdom,\n\ttoVdom,\n\trender,\n\tparseServerData,\n\tpopulateServerData,\n\tbatch,\n} = privateApis(\n\t'I acknowledge that using private APIs means my theme or plugin will inevitably break in the next version of WordPress.'\n);\n\ninterface NavigateOptions {\n\tforce?: boolean;\n\thtml?: string;\n\treplace?: boolean;\n\ttimeout?: number;\n\tloadingAnimation?: boolean;\n\tscreenReaderAnnouncement?: boolean;\n}\n\ninterface PrefetchOptions {\n\tforce?: boolean;\n\thtml?: string;\n}\n\ninterface VdomParams {\n\tvdom?: typeof initialVdom;\n}\n\ninterface Page {\n\tregions: Record< string, any >;\n\ttitle: string;\n\tinitialData: any;\n}\n\ntype RegionsToVdom = ( dom: Document, params?: VdomParams ) => Promise< Page >;\n\n// Check if the navigation mode is full page or region based. The only supported\n// mode for now is 'regionBased'.\nconst navigationMode: 'regionBased' = 'regionBased';\n\n// The cache of visited and prefetched pages, stylesheets and scripts.\nconst pages = new Map< string, Promise< Page | false > >();\n\n// Helper to remove domain and hash from the URL. We are only interesting in\n// caching the path and the query.\nconst getPagePath = ( url: string ) => {\n\tconst u = new URL( url, window.location.href );\n\treturn u.pathname + u.search;\n};\n\n// Fetch a new page and convert it to a static virtual DOM.\nconst fetchPage = async ( url: string, { html }: { html: string } ) => {\n\ttry {\n\t\tif ( ! html ) {\n\t\t\tconst res = await window.fetch( url );\n\t\t\tif ( res.status !== 200 ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\thtml = await res.text();\n\t\t}\n\t\tconst dom = new window.DOMParser().parseFromString( html, 'text/html' );\n\t\treturn regionsToVdom( dom );\n\t} catch ( e ) {\n\t\treturn false;\n\t}\n};\n\n// Return an object with VDOM trees of those HTML regions marked with a\n// `router-region` directive.\nconst regionsToVdom: RegionsToVdom = async ( dom, { vdom } = {} ) => {\n\tconst regions = { body: undefined };\n\tif ( navigationMode === 'regionBased' ) {\n\t\tconst attrName = `data-${ directivePrefix }-router-region`;\n\t\tdom.querySelectorAll( `[${ attrName }]` ).forEach( ( region ) => {\n\t\t\tconst id = region.getAttribute( attrName );\n\t\t\tregions[ id ] = vdom?.has( region )\n\t\t\t\t? vdom.get( region )\n\t\t\t\t: toVdom( region );\n\t\t} );\n\t}\n\tconst title = dom.querySelector( 'title' )?.innerText;\n\tconst initialData = parseServerData( dom );\n\treturn { regions, title, initialData };\n};\n\n// Render all interactive regions contained in the given page.\nconst renderRegions = async ( page: Page ) => {\n\tif ( navigationMode === 'regionBased' ) {\n\t\tconst attrName = `data-${ directivePrefix }-router-region`;\n\t\tbatch( () => {\n\t\t\tpopulateServerData( page.initialData );\n\t\t\tdocument\n\t\t\t\t.querySelectorAll( `[${ attrName }]` )\n\t\t\t\t.forEach( ( region ) => {\n\t\t\t\t\tconst id = region.getAttribute( attrName );\n\t\t\t\t\tconst fragment = getRegionRootFragment( region );\n\t\t\t\t\trender( page.regions[ id ], fragment );\n\t\t\t\t} );\n\t\t} );\n\t}\n\tif ( page.title ) {\n\t\tdocument.title = page.title;\n\t}\n};\n\n/**\n * Load the given page forcing a full page reload.\n *\n * The function returns a promise that won't resolve, useful to prevent any\n * potential feedback indicating that the navigation has finished while the new\n * page is being loaded.\n *\n * @param href The page href.\n * @return Promise that never resolves.\n */\nconst forcePageReload = ( href: string ) => {\n\twindow.location.assign( href );\n\treturn new Promise( () => {} );\n};\n\n// Listen to the back and forward buttons and restore the page if it's in the\n// cache.\nwindow.addEventListener( 'popstate', async () => {\n\tconst pagePath = getPagePath( window.location.href ); // Remove hash.\n\tconst page = pages.has( pagePath ) && ( await pages.get( pagePath ) );\n\tif ( page ) {\n\t\tawait renderRegions( page );\n\t\t// Update the URL in the state.\n\t\tstate.url = window.location.href;\n\t} else {\n\t\twindow.location.reload();\n\t}\n} );\n\n// Initialize the router and cache the initial page using the initial vDOM.\npages.set(\n\tgetPagePath( window.location.href ),\n\tPromise.resolve( regionsToVdom( document, { vdom: initialVdom } ) )\n);\n\n// Variable to store the current navigation.\nlet navigatingTo = '';\n\nlet hasLoadedNavigationTextsData = false;\nconst navigationTexts = {\n\tloading: 'Loading page, please wait.',\n\tloaded: 'Page Loaded.',\n};\n\ninterface Store {\n\tstate: {\n\t\turl: string;\n\t\tnavigation: {\n\t\t\thasStarted: boolean;\n\t\t\thasFinished: boolean;\n\t\t};\n\t};\n\tactions: {\n\t\tnavigate: ( href: string, options?: NavigateOptions ) => void;\n\t\tprefetch: ( url: string, options?: PrefetchOptions ) => void;\n\t};\n}\n\nexport const { state, actions } = store< Store >( 'core/router', {\n\tstate: {\n\t\turl: window.location.href,\n\t\tnavigation: {\n\t\t\thasStarted: false,\n\t\t\thasFinished: false,\n\t\t},\n\t},\n\tactions: {\n\t\t/**\n\t\t * Navigates to the specified page.\n\t\t *\n\t\t * This function normalizes the passed href, fetches the page HTML if\n\t\t * needed, and updates any interactive regions whose contents have\n\t\t * changed. It also creates a new entry in the browser session history.\n\t\t *\n\t\t * @param href                               The page href.\n\t\t * @param [options]                          Options object.\n\t\t * @param [options.force]                    If true, it forces re-fetching the URL.\n\t\t * @param [options.html]                     HTML string to be used instead of fetching the requested URL.\n\t\t * @param [options.replace]                  If true, it replaces the current entry in the browser session history.\n\t\t * @param [options.timeout]                  Time until the navigation is aborted, in milliseconds. Default is 10000.\n\t\t * @param [options.loadingAnimation]         Whether an animation should be shown while navigating. Default to `true`.\n\t\t * @param [options.screenReaderAnnouncement] Whether a message for screen readers should be announced while navigating. Default to `true`.\n\t\t *\n\t\t * @return  Promise that resolves once the navigation is completed or aborted.\n\t\t */\n\t\t*navigate( href: string, options: NavigateOptions = {} ) {\n\t\t\tconst { clientNavigationDisabled } = getConfig();\n\t\t\tif ( clientNavigationDisabled ) {\n\t\t\t\tyield forcePageReload( href );\n\t\t\t}\n\n\t\t\tconst pagePath = getPagePath( href );\n\t\t\tconst { navigation } = state;\n\t\t\tconst {\n\t\t\t\tloadingAnimation = true,\n\t\t\t\tscreenReaderAnnouncement = true,\n\t\t\t\ttimeout = 10000,\n\t\t\t} = options;\n\n\t\t\tnavigatingTo = href;\n\t\t\tactions.prefetch( pagePath, options );\n\n\t\t\t// Create a promise that resolves when the specified timeout ends.\n\t\t\t// The timeout value is 10 seconds by default.\n\t\t\tconst timeoutPromise = new Promise< void >( ( resolve ) =>\n\t\t\t\tsetTimeout( resolve, timeout )\n\t\t\t);\n\n\t\t\t// Don't update the navigation status immediately, wait 400 ms.\n\t\t\tconst loadingTimeout = setTimeout( () => {\n\t\t\t\tif ( navigatingTo !== href ) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif ( loadingAnimation ) {\n\t\t\t\t\tnavigation.hasStarted = true;\n\t\t\t\t\tnavigation.hasFinished = false;\n\t\t\t\t}\n\t\t\t\tif ( screenReaderAnnouncement ) {\n\t\t\t\t\ta11ySpeak( 'loading' );\n\t\t\t\t}\n\t\t\t}, 400 );\n\n\t\t\tconst page = yield Promise.race( [\n\t\t\t\tpages.get( pagePath ),\n\t\t\t\ttimeoutPromise,\n\t\t\t] );\n\n\t\t\t// Dismiss loading message if it hasn't been added yet.\n\t\t\tclearTimeout( loadingTimeout );\n\n\t\t\t// Once the page is fetched, the destination URL could have changed\n\t\t\t// (e.g., by clicking another link in the meantime). If so, bail\n\t\t\t// out, and let the newer execution to update the HTML.\n\t\t\tif ( navigatingTo !== href ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tpage &&\n\t\t\t\t! page.initialData?.config?.[ 'core/router' ]\n\t\t\t\t\t?.clientNavigationDisabled\n\t\t\t) {\n\t\t\t\tyield renderRegions( page );\n\t\t\t\twindow.history[\n\t\t\t\t\toptions.replace ? 'replaceState' : 'pushState'\n\t\t\t\t]( {}, '', href );\n\n\t\t\t\t// Update the URL in the state.\n\t\t\t\tstate.url = href;\n\n\t\t\t\t// Update the navigation status once the the new page rendering\n\t\t\t\t// has been completed.\n\t\t\t\tif ( loadingAnimation ) {\n\t\t\t\t\tnavigation.hasStarted = false;\n\t\t\t\t\tnavigation.hasFinished = true;\n\t\t\t\t}\n\n\t\t\t\tif ( screenReaderAnnouncement ) {\n\t\t\t\t\ta11ySpeak( 'loaded' );\n\t\t\t\t}\n\n\t\t\t\t// Scroll to the anchor if exits in the link.\n\t\t\t\tconst { hash } = new URL( href, window.location.href );\n\t\t\t\tif ( hash ) {\n\t\t\t\t\tdocument.querySelector( hash )?.scrollIntoView();\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tyield forcePageReload( href );\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Prefetches the page with the passed URL.\n\t\t *\n\t\t * The function normalizes the URL and stores internally the fetch\n\t\t * promise, to avoid triggering a second fetch for an ongoing request.\n\t\t *\n\t\t * @param url             The page URL.\n\t\t * @param [options]       Options object.\n\t\t * @param [options.force] Force fetching the URL again.\n\t\t * @param [options.html]  HTML string to be used instead of fetching the requested URL.\n\t\t */\n\t\tprefetch( url: string, options: PrefetchOptions = {} ) {\n\t\t\tconst { clientNavigationDisabled } = getConfig();\n\t\t\tif ( clientNavigationDisabled ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst pagePath = getPagePath( url );\n\t\t\tif ( options.force || ! pages.has( pagePath ) ) {\n\t\t\t\tpages.set(\n\t\t\t\t\tpagePath,\n\t\t\t\t\tfetchPage( pagePath, { html: options.html } )\n\t\t\t\t);\n\t\t\t}\n\t\t},\n\t},\n} );\n\n/**\n * Announces a message to screen readers.\n *\n * This is a wrapper around the `@wordpress/a11y` package's `speak` function. It handles importing\n * the package on demand and should be used instead of calling `ally.speak` direacly.\n *\n * @param messageKey The message to be announced by assistive technologies.\n */\nfunction a11ySpeak( messageKey: keyof typeof navigationTexts ) {\n\tif ( ! hasLoadedNavigationTextsData ) {\n\t\thasLoadedNavigationTextsData = true;\n\t\tconst content = document.getElementById(\n\t\t\t'wp-script-module-data-@wordpress/interactivity-router'\n\t\t)?.textContent;\n\t\tif ( content ) {\n\t\t\ttry {\n\t\t\t\tconst parsed = JSON.parse( content );\n\t\t\t\tif ( typeof parsed?.i18n?.loading === 'string' ) {\n\t\t\t\t\tnavigationTexts.loading = parsed.i18n.loading;\n\t\t\t\t}\n\t\t\t\tif ( typeof parsed?.i18n?.loaded === 'string' ) {\n\t\t\t\t\tnavigationTexts.loaded = parsed.i18n.loaded;\n\t\t\t\t}\n\t\t\t} catch {}\n\t\t} else {\n\t\t\t// Fallback to localized strings from Interactivity API state.\n\t\t\t// @todo This block is for Core < 6.7.0. Remove when support is dropped.\n\n\t\t\t// @ts-expect-error\n\t\t\tif ( state.navigation.texts?.loading ) {\n\t\t\t\t// @ts-expect-error\n\t\t\t\tnavigationTexts.loading = state.navigation.texts.loading;\n\t\t\t}\n\t\t\t// @ts-expect-error\n\t\t\tif ( state.navigation.texts?.loaded ) {\n\t\t\t\t// @ts-expect-error\n\t\t\t\tnavigationTexts.loaded = state.navigation.texts.loaded;\n\t\t\t}\n\t\t}\n\t}\n\n\tconst message = navigationTexts[ messageKey ];\n\n\timport( '@wordpress/a11y' ).then(\n\t\t( { speak } ) => speak( message ),\n\t\t// Ignore failures to load the a11y module.\n\t\t() => {}\n\t);\n}\n"],"names":["module","exports","import","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","y","__WEBPACK_EXTERNAL_MODULE__wordpress_interactivity_8e89b257__","x","directivePrefix","getRegionRootFragment","initialVdom","toVdom","render","parseServerData","populateServerData","batch","privateApis","pages","Map","getPagePath","url","u","URL","window","location","href","pathname","search","regionsToVdom","async","dom","vdom","regions","body","attrName","querySelectorAll","forEach","region","id","getAttribute","has","title","querySelector","innerText","initialData","renderRegions","page","document","fragment","forcePageReload","assign","Promise","addEventListener","pagePath","state","reload","set","resolve","navigatingTo","hasLoadedNavigationTextsData","navigationTexts","loading","loaded","actions","store","navigation","hasStarted","hasFinished","navigate","options","clientNavigationDisabled","getConfig","loadingAnimation","screenReaderAnnouncement","timeout","prefetch","timeoutPromise","setTimeout","loadingTimeout","a11ySpeak","race","clearTimeout","config","history","replace","hash","scrollIntoView","force","html","res","fetch","status","text","DOMParser","parseFromString","e","fetchPage","messageKey","content","getElementById","textContent","parsed","JSON","parse","i18n","texts","message","then","speak"],"sourceRoot":""}