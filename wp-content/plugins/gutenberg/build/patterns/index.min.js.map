{"version":3,"file":"./build/patterns/index.min.js","mappings":"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","sources":["webpack://wp/webpack/bootstrap","webpack://wp/webpack/runtime/define property getters","webpack://wp/webpack/runtime/hasOwnProperty shorthand","webpack://wp/webpack/runtime/make namespace object","webpack://wp/external window [\"wp\",\"data\"]","../../packages/patterns/src/store/reducer.js","webpack://wp/external window [\"wp\",\"blocks\"]","webpack://wp/external window [\"wp\",\"coreData\"]","webpack://wp/external window [\"wp\",\"blockEditor\"]","../../packages/patterns/src/constants.js","../../packages/patterns/src/store/actions.js","../../packages/patterns/src/store/selectors.js","webpack://wp/external window [\"wp\",\"privateApis\"]","../../packages/patterns/src/lock-unlock.js","../../packages/patterns/src/store/index.js","../../packages/patterns/src/store/constants.js","webpack://wp/external window \"React\"","webpack://wp/external window [\"wp\",\"components\"]","webpack://wp/external window [\"wp\",\"i18n\"]","webpack://wp/external window [\"wp\",\"element\"]","webpack://wp/external window [\"wp\",\"notices\"]","webpack://wp/external window [\"wp\",\"compose\"]","webpack://wp/external window [\"wp\",\"htmlEntities\"]","../../packages/patterns/src/components/category-selector.js","../../packages/patterns/src/components/create-pattern-modal.js","../../packages/patterns/src/components/duplicate-pattern-modal.js","webpack://wp/external window [\"wp\",\"primitives\"]","../../packages/icons/src/library/symbol.js","../../packages/patterns/src/components/pattern-convert-button.js","webpack://wp/external window [\"wp\",\"url\"]","../../packages/patterns/src/components/patterns-manage-button.js","webpack://wp/external window [\"wp\",\"a11y\"]","../../packages/patterns/src/private-apis.js","../../packages/patterns/src/components/rename-pattern-modal.js","../../packages/patterns/src/components/index.js","../../packages/patterns/src/components/rename-pattern-category-modal.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","var __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"data\"];","/**\n * WordPress dependencies\n */\nimport { combineReducers } from '@wordpress/data';\n\nexport function isEditingPattern( state = {}, action ) {\n\tif ( action?.type === 'SET_EDITING_PATTERN' ) {\n\t\treturn {\n\t\t\t...state,\n\t\t\t[ action.clientId ]: action.isEditing,\n\t\t};\n\t}\n\n\treturn state;\n}\n\nexport default combineReducers( {\n\tisEditingPattern,\n} );\n","var __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"blocks\"];","var __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"coreData\"];","var __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"blockEditor\"];","export const PATTERN_TYPES = {\n\ttheme: 'pattern',\n\tuser: 'wp_block',\n};\n\nexport const PATTERN_DEFAULT_CATEGORY = 'all-patterns';\nexport const PATTERN_USER_CATEGORY = 'my-patterns';\nexport const EXCLUDED_PATTERN_SOURCES = [\n\t'core',\n\t'pattern-directory/core',\n\t'pattern-directory/featured',\n];\nexport const PATTERN_SYNC_TYPES = {\n\tfull: 'fully',\n\tunsynced: 'unsynced',\n};\n","/**\n * WordPress dependencies\n */\n\nimport { parse } from '@wordpress/blocks';\nimport { store as coreStore } from '@wordpress/core-data';\nimport { store as blockEditorStore } from '@wordpress/block-editor';\n\n/**\n * Internal dependencies\n */\nimport { PATTERN_SYNC_TYPES } from '../constants';\n\n/**\n * Returns a generator converting one or more static blocks into a pattern, or creating a new empty pattern.\n *\n * @param {string}             title        Pattern title.\n * @param {'full'|'unsynced'}  syncType     They way block is synced, 'full' or 'unsynced'.\n * @param {string|undefined}   [content]    Optional serialized content of blocks to convert to pattern.\n * @param {number[]|undefined} [categories] Ids of any selected categories.\n */\nexport const createPattern =\n\t( title, syncType, content, categories ) =>\n\tasync ( { registry } ) => {\n\t\tconst meta =\n\t\t\tsyncType === PATTERN_SYNC_TYPES.unsynced\n\t\t\t\t? {\n\t\t\t\t\t\twp_pattern_sync_status: syncType,\n\t\t\t\t  }\n\t\t\t\t: undefined;\n\n\t\tconst reusableBlock = {\n\t\t\ttitle,\n\t\t\tcontent,\n\t\t\tstatus: 'publish',\n\t\t\tmeta,\n\t\t\twp_pattern_category: categories,\n\t\t};\n\n\t\tconst updatedRecord = await registry\n\t\t\t.dispatch( coreStore )\n\t\t\t.saveEntityRecord( 'postType', 'wp_block', reusableBlock );\n\n\t\treturn updatedRecord;\n\t};\n\n/**\n * Create a pattern from a JSON file.\n * @param {File}               file         The JSON file instance of the pattern.\n * @param {number[]|undefined} [categories] Ids of any selected categories.\n */\nexport const createPatternFromFile =\n\t( file, categories ) =>\n\tasync ( { dispatch } ) => {\n\t\tconst fileContent = await file.text();\n\t\t/** @type {import('./types').PatternJSON} */\n\t\tlet parsedContent;\n\t\ttry {\n\t\t\tparsedContent = JSON.parse( fileContent );\n\t\t} catch ( e ) {\n\t\t\tthrow new Error( 'Invalid JSON file' );\n\t\t}\n\t\tif (\n\t\t\tparsedContent.__file !== 'wp_block' ||\n\t\t\t! parsedContent.title ||\n\t\t\t! parsedContent.content ||\n\t\t\ttypeof parsedContent.title !== 'string' ||\n\t\t\ttypeof parsedContent.content !== 'string' ||\n\t\t\t( parsedContent.syncStatus &&\n\t\t\t\ttypeof parsedContent.syncStatus !== 'string' )\n\t\t) {\n\t\t\tthrow new Error( 'Invalid pattern JSON file' );\n\t\t}\n\n\t\tconst pattern = await dispatch.createPattern(\n\t\t\tparsedContent.title,\n\t\t\tparsedContent.syncStatus,\n\t\t\tparsedContent.content,\n\t\t\tcategories\n\t\t);\n\n\t\treturn pattern;\n\t};\n\n/**\n * Returns a generator converting a synced pattern block into a static block.\n *\n * @param {string} clientId The client ID of the block to attach.\n */\nexport const convertSyncedPatternToStatic =\n\t( clientId ) =>\n\t( { registry } ) => {\n\t\tconst oldBlock = registry\n\t\t\t.select( blockEditorStore )\n\t\t\t.getBlock( clientId );\n\t\tconst pattern = registry\n\t\t\t.select( 'core' )\n\t\t\t.getEditedEntityRecord(\n\t\t\t\t'postType',\n\t\t\t\t'wp_block',\n\t\t\t\toldBlock.attributes.ref\n\t\t\t);\n\n\t\tconst newBlocks = parse(\n\t\t\ttypeof pattern.content === 'function'\n\t\t\t\t? pattern.content( pattern )\n\t\t\t\t: pattern.content\n\t\t);\n\t\tregistry\n\t\t\t.dispatch( blockEditorStore )\n\t\t\t.replaceBlocks( oldBlock.clientId, newBlocks );\n\t};\n\n/**\n * Returns an action descriptor for SET_EDITING_PATTERN action.\n *\n * @param {string}  clientId  The clientID of the pattern to target.\n * @param {boolean} isEditing Whether the block should be in editing state.\n * @return {Object} Action descriptor.\n */\nexport function setEditingPattern( clientId, isEditing ) {\n\treturn {\n\t\ttype: 'SET_EDITING_PATTERN',\n\t\tclientId,\n\t\tisEditing,\n\t};\n}\n","/**\n * Returns true if pattern is in the editing state.\n *\n * @param {Object} state    Global application state.\n * @param {number} clientId the clientID of the block.\n * @return {boolean} Whether the pattern is in the editing state.\n */\nexport function isEditingPattern( state, clientId ) {\n\treturn state.isEditingPattern[ clientId ];\n}\n","var __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"privateApis\"];","/**\n * WordPress dependencies\n */\nimport { __dangerousOptInToUnstableAPIsOnlyForCoreModules } from '@wordpress/private-apis';\nexport const { lock, unlock } =\n\t__dangerousOptInToUnstableAPIsOnlyForCoreModules(\n\t\t'I know using unstable features means my theme or plugin will inevitably break in the next version of WordPress.',\n\t\t'@wordpress/patterns'\n\t);\n","/**\n * WordPress dependencies\n */\nimport { createReduxStore, register } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport reducer from './reducer';\nimport * as actions from './actions';\nimport { STORE_NAME } from './constants';\nimport * as selectors from './selectors';\nimport { unlock } from '../lock-unlock';\n\n/**\n * Post editor data store configuration.\n *\n * @see https://github.com/WordPress/gutenberg/blob/HEAD/packages/data/README.md#registerStore\n *\n * @type {Object}\n */\nexport const storeConfig = {\n\treducer,\n};\n\n/**\n * Store definition for the editor namespace.\n *\n * @see https://github.com/WordPress/gutenberg/blob/HEAD/packages/data/README.md#createReduxStore\n *\n * @type {Object}\n */\nexport const store = createReduxStore( STORE_NAME, {\n\t...storeConfig,\n} );\n\nregister( store );\nunlock( store ).registerPrivateActions( actions );\nunlock( store ).registerPrivateSelectors( selectors );\n","/**\n * Module Constants\n */\nexport const STORE_NAME = 'core/patterns';\n","var __WEBPACK_NAMESPACE_OBJECT__ = window[\"React\"];","var __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"components\"];","var __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"i18n\"];","var __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"element\"];","var __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"notices\"];","var __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"compose\"];","var __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"htmlEntities\"];","/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport { useMemo, useState } from '@wordpress/element';\nimport { FormTokenField } from '@wordpress/components';\nimport { useDebounce } from '@wordpress/compose';\nimport { decodeEntities } from '@wordpress/html-entities';\n\nconst unescapeString = ( arg ) => {\n\treturn decodeEntities( arg );\n};\n\nexport const CATEGORY_SLUG = 'wp_pattern_category';\n\nexport default function CategorySelector( {\n\tcategoryTerms,\n\tonChange,\n\tcategoryMap,\n} ) {\n\tconst [ search, setSearch ] = useState( '' );\n\tconst debouncedSearch = useDebounce( setSearch, 500 );\n\n\tconst suggestions = useMemo( () => {\n\t\treturn Array.from( categoryMap.values() )\n\t\t\t.map( ( category ) => unescapeString( category.label ) )\n\t\t\t.filter( ( category ) => {\n\t\t\t\tif ( search !== '' ) {\n\t\t\t\t\treturn category\n\t\t\t\t\t\t.toLowerCase()\n\t\t\t\t\t\t.includes( search.toLowerCase() );\n\t\t\t\t}\n\t\t\t\treturn true;\n\t\t\t} )\n\t\t\t.sort( ( a, b ) => a.localeCompare( b ) );\n\t}, [ search, categoryMap ] );\n\n\tfunction handleChange( termNames ) {\n\t\tconst uniqueTerms = termNames.reduce( ( terms, newTerm ) => {\n\t\t\tif (\n\t\t\t\t! terms.some(\n\t\t\t\t\t( term ) => term.toLowerCase() === newTerm.toLowerCase()\n\t\t\t\t)\n\t\t\t) {\n\t\t\t\tterms.push( newTerm );\n\t\t\t}\n\t\t\treturn terms;\n\t\t}, [] );\n\n\t\tonChange( uniqueTerms );\n\t}\n\n\treturn (\n\t\t<FormTokenField\n\t\t\tclassName=\"patterns-menu-items__convert-modal-categories\"\n\t\t\tvalue={ categoryTerms }\n\t\t\tsuggestions={ suggestions }\n\t\t\tonChange={ handleChange }\n\t\t\tonInputChange={ debouncedSearch }\n\t\t\tlabel={ __( 'Categories' ) }\n\t\t\ttokenizeOnBlur\n\t\t\t__experimentalExpandOnFocus\n\t\t\t__next40pxDefaultSize\n\t\t/>\n\t);\n}\n","/**\n * WordPress dependencies\n */\nimport {\n\tModal,\n\tButton,\n\tTextControl,\n\t__experimentalHStack as HStack,\n\t__experimentalVStack as VStack,\n\tToggleControl,\n} from '@wordpress/components';\nimport { __, _x } from '@wordpress/i18n';\nimport { useState, useMemo } from '@wordpress/element';\nimport { useDispatch, useSelect } from '@wordpress/data';\nimport { store as noticesStore } from '@wordpress/notices';\nimport { store as coreStore } from '@wordpress/core-data';\n\n/**\n * Internal dependencies\n */\nimport { PATTERN_DEFAULT_CATEGORY, PATTERN_SYNC_TYPES } from '../constants';\n\n/**\n * Internal dependencies\n */\nimport { store as patternsStore } from '../store';\nimport CategorySelector, { CATEGORY_SLUG } from './category-selector';\nimport { unlock } from '../lock-unlock';\n\nexport default function CreatePatternModal( {\n\tconfirmLabel = __( 'Create' ),\n\tdefaultCategories = [],\n\tclassName = 'patterns-menu-items__convert-modal',\n\tcontent,\n\tmodalTitle = __( 'Create pattern' ),\n\tonClose,\n\tonError,\n\tonSuccess,\n\tdefaultSyncType = PATTERN_SYNC_TYPES.full,\n\tdefaultTitle = '',\n} ) {\n\tconst [ syncType, setSyncType ] = useState( defaultSyncType );\n\tconst [ categoryTerms, setCategoryTerms ] = useState( defaultCategories );\n\tconst [ title, setTitle ] = useState( defaultTitle );\n\n\tconst [ isSaving, setIsSaving ] = useState( false );\n\tconst { createPattern } = unlock( useDispatch( patternsStore ) );\n\tconst { saveEntityRecord, invalidateResolution } = useDispatch( coreStore );\n\tconst { createErrorNotice } = useDispatch( noticesStore );\n\n\tconst { corePatternCategories, userPatternCategories } = useSelect(\n\t\t( select ) => {\n\t\t\tconst { getUserPatternCategories, getBlockPatternCategories } =\n\t\t\t\tselect( coreStore );\n\n\t\t\treturn {\n\t\t\t\tcorePatternCategories: getBlockPatternCategories(),\n\t\t\t\tuserPatternCategories: getUserPatternCategories(),\n\t\t\t};\n\t\t}\n\t);\n\n\tconst categoryMap = useMemo( () => {\n\t\t// Merge the user and core pattern categories and remove any duplicates.\n\t\tconst uniqueCategories = new Map();\n\t\t[ ...userPatternCategories, ...corePatternCategories ].forEach(\n\t\t\t( category ) => {\n\t\t\t\tif (\n\t\t\t\t\t! uniqueCategories.has( category.label ) &&\n\t\t\t\t\t// There are two core categories with `Post` label so explicitly remove the one with\n\t\t\t\t\t// the `query` slug to avoid any confusion.\n\t\t\t\t\tcategory.name !== 'query'\n\t\t\t\t) {\n\t\t\t\t\t// We need to store the name separately as this is used as the slug in the\n\t\t\t\t\t// taxonomy and may vary from the label.\n\t\t\t\t\tuniqueCategories.set( category.label, {\n\t\t\t\t\t\tlabel: category.label,\n\t\t\t\t\t\tvalue: category.label,\n\t\t\t\t\t\tname: category.name,\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t\treturn uniqueCategories;\n\t}, [ userPatternCategories, corePatternCategories ] );\n\n\tasync function onCreate( patternTitle, sync ) {\n\t\tif ( ! title || isSaving ) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tsetIsSaving( true );\n\t\t\tconst categories = await Promise.all(\n\t\t\t\tcategoryTerms.map( ( termName ) =>\n\t\t\t\t\tfindOrCreateTerm( termName )\n\t\t\t\t)\n\t\t\t);\n\n\t\t\tconst newPattern = await createPattern(\n\t\t\t\tpatternTitle,\n\t\t\t\tsync,\n\t\t\t\ttypeof content === 'function' ? content() : content,\n\t\t\t\tcategories\n\t\t\t);\n\t\t\tonSuccess( {\n\t\t\t\tpattern: newPattern,\n\t\t\t\tcategoryId: PATTERN_DEFAULT_CATEGORY,\n\t\t\t} );\n\t\t} catch ( error ) {\n\t\t\tcreateErrorNotice( error.message, {\n\t\t\t\ttype: 'snackbar',\n\t\t\t\tid: 'pattern-create',\n\t\t\t} );\n\t\t\tonError?.();\n\t\t} finally {\n\t\t\tsetIsSaving( false );\n\t\t\tsetCategoryTerms( [] );\n\t\t\tsetTitle( '' );\n\t\t}\n\t}\n\n\t/**\n\t * @param {string} term\n\t * @return {Promise<number>} The pattern category id.\n\t */\n\tasync function findOrCreateTerm( term ) {\n\t\ttry {\n\t\t\t// We need to match any existing term to the correct slug to prevent duplicates, eg.\n\t\t\t// the core `Headers` category uses the singular `header` as the slug.\n\t\t\tconst existingTerm = categoryMap.get( term );\n\t\t\tconst termData = existingTerm\n\t\t\t\t? { name: existingTerm.label, slug: existingTerm.name }\n\t\t\t\t: { name: term };\n\t\t\tconst newTerm = await saveEntityRecord(\n\t\t\t\t'taxonomy',\n\t\t\t\tCATEGORY_SLUG,\n\t\t\t\ttermData,\n\t\t\t\t{ throwOnError: true }\n\t\t\t);\n\t\t\tinvalidateResolution( 'getUserPatternCategories' );\n\t\t\treturn newTerm.id;\n\t\t} catch ( error ) {\n\t\t\tif ( error.code !== 'term_exists' ) {\n\t\t\t\tthrow error;\n\t\t\t}\n\n\t\t\treturn error.data.term_id;\n\t\t}\n\t}\n\n\treturn (\n\t\t<Modal\n\t\t\ttitle={ modalTitle }\n\t\t\tonRequestClose={ () => {\n\t\t\t\tonClose();\n\t\t\t\tsetTitle( '' );\n\t\t\t} }\n\t\t\toverlayClassName={ className }\n\t\t>\n\t\t\t<form\n\t\t\t\tonSubmit={ ( event ) => {\n\t\t\t\t\tevent.preventDefault();\n\t\t\t\t\tonCreate( title, syncType );\n\t\t\t\t} }\n\t\t\t>\n\t\t\t\t<VStack spacing=\"5\">\n\t\t\t\t\t<TextControl\n\t\t\t\t\t\t__nextHasNoMarginBottom\n\t\t\t\t\t\tlabel={ __( 'Name' ) }\n\t\t\t\t\t\tvalue={ title }\n\t\t\t\t\t\tonChange={ setTitle }\n\t\t\t\t\t\tplaceholder={ __( 'My pattern' ) }\n\t\t\t\t\t\tclassName=\"patterns-create-modal__name-input\"\n\t\t\t\t\t/>\n\t\t\t\t\t<CategorySelector\n\t\t\t\t\t\tcategoryTerms={ categoryTerms }\n\t\t\t\t\t\tonChange={ setCategoryTerms }\n\t\t\t\t\t\tcategoryMap={ categoryMap }\n\t\t\t\t\t/>\n\t\t\t\t\t<ToggleControl\n\t\t\t\t\t\tlabel={ _x(\n\t\t\t\t\t\t\t'Synced',\n\t\t\t\t\t\t\t'Option that makes an individual pattern synchronized'\n\t\t\t\t\t\t) }\n\t\t\t\t\t\thelp={ __(\n\t\t\t\t\t\t\t'Editing the pattern will update it anywhere it is used.'\n\t\t\t\t\t\t) }\n\t\t\t\t\t\tchecked={ syncType === PATTERN_SYNC_TYPES.full }\n\t\t\t\t\t\tonChange={ () => {\n\t\t\t\t\t\t\tsetSyncType(\n\t\t\t\t\t\t\t\tsyncType === PATTERN_SYNC_TYPES.full\n\t\t\t\t\t\t\t\t\t? PATTERN_SYNC_TYPES.unsynced\n\t\t\t\t\t\t\t\t\t: PATTERN_SYNC_TYPES.full\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t} }\n\t\t\t\t\t/>\n\t\t\t\t\t<HStack justify=\"right\">\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tvariant=\"tertiary\"\n\t\t\t\t\t\t\tonClick={ () => {\n\t\t\t\t\t\t\t\tonClose();\n\t\t\t\t\t\t\t\tsetTitle( '' );\n\t\t\t\t\t\t\t} }\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{ __( 'Cancel' ) }\n\t\t\t\t\t\t</Button>\n\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tvariant=\"primary\"\n\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\taria-disabled={ ! title || isSaving }\n\t\t\t\t\t\t\tisBusy={ isSaving }\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{ confirmLabel }\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</HStack>\n\t\t\t\t</VStack>\n\t\t\t</form>\n\t\t</Modal>\n\t);\n}\n","/**\n * WordPress dependencies\n */\nimport { store as coreStore } from '@wordpress/core-data';\nimport { useDispatch, useSelect } from '@wordpress/data';\nimport { __, sprintf } from '@wordpress/i18n';\nimport { store as noticesStore } from '@wordpress/notices';\n\n/**\n * Internal dependencies\n */\nimport CreatePatternModal from './create-pattern-modal';\nimport { PATTERN_SYNC_TYPES } from '../constants';\n\nfunction getTermLabels( pattern, categories ) {\n\t// Theme patterns don't have an id and rely on core pattern categories.\n\tif ( ! pattern.id ) {\n\t\treturn categories.core\n\t\t\t?.filter( ( category ) =>\n\t\t\t\tpattern.categories.includes( category.name )\n\t\t\t)\n\t\t\t.map( ( category ) => category.label );\n\t}\n\n\treturn categories.user\n\t\t?.filter( ( category ) =>\n\t\t\tpattern.wp_pattern_category.includes( category.id )\n\t\t)\n\t\t.map( ( category ) => category.label );\n}\n\nexport default function DuplicatePatternModal( {\n\tpattern,\n\tonClose,\n\tonSuccess,\n} ) {\n\tconst { createSuccessNotice } = useDispatch( noticesStore );\n\tconst categories = useSelect( ( select ) => {\n\t\tconst { getUserPatternCategories, getBlockPatternCategories } =\n\t\t\tselect( coreStore );\n\n\t\treturn {\n\t\t\tcore: getBlockPatternCategories(),\n\t\t\tuser: getUserPatternCategories(),\n\t\t};\n\t} );\n\n\tif ( ! pattern ) {\n\t\treturn null;\n\t}\n\n\tconst duplicatedProps = {\n\t\tcontent: pattern.content,\n\t\tdefaultCategories: getTermLabels( pattern, categories ),\n\t\tdefaultSyncType: ! pattern.id // Theme patterns don't have an ID.\n\t\t\t? PATTERN_SYNC_TYPES.unsynced\n\t\t\t: pattern.wp_pattern_sync_status || PATTERN_SYNC_TYPES.full,\n\t\tdefaultTitle: sprintf(\n\t\t\t/* translators: %s: Existing pattern title */\n\t\t\t__( '%s (Copy)' ),\n\t\t\ttypeof pattern.title === 'string'\n\t\t\t\t? pattern.title\n\t\t\t\t: pattern.title.raw\n\t\t),\n\t};\n\n\tfunction handleOnSuccess( { pattern: newPattern } ) {\n\t\tcreateSuccessNotice(\n\t\t\tsprintf(\n\t\t\t\t// translators: %s: The new pattern's title e.g. 'Call to action (copy)'.\n\t\t\t\t__( '\"%s\" duplicated.' ),\n\t\t\t\tnewPattern.title.raw\n\t\t\t),\n\t\t\t{\n\t\t\t\ttype: 'snackbar',\n\t\t\t\tid: 'patterns-create',\n\t\t\t}\n\t\t);\n\n\t\tonSuccess?.( { pattern: newPattern } );\n\t}\n\n\treturn (\n\t\t<CreatePatternModal\n\t\t\tmodalTitle={ __( 'Duplicate pattern' ) }\n\t\t\tconfirmLabel={ __( 'Duplicate' ) }\n\t\t\tonClose={ onClose }\n\t\t\tonError={ onClose }\n\t\t\tonSuccess={ handleOnSuccess }\n\t\t\t{ ...duplicatedProps }\n\t\t/>\n\t);\n}\n","var __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"primitives\"];","/**\n * WordPress dependencies\n */\nimport { SVG, Path } from '@wordpress/primitives';\n\nconst symbol = (\n\t<SVG xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n\t\t<Path d=\"M21.3 10.8l-5.6-5.6c-.7-.7-1.8-.7-2.5 0l-5.6 5.6c-.7.7-.7 1.8 0 2.5l5.6 5.6c.3.3.8.5 1.2.5s.9-.2 1.2-.5l5.6-5.6c.8-.7.8-1.9.1-2.5zm-1 1.4l-5.6 5.6c-.1.1-.3.1-.4 0l-5.6-5.6c-.1-.1-.1-.3 0-.4l5.6-5.6s.1-.1.2-.1.1 0 .2.1l5.6 5.6c.1.1.1.3 0 .4zm-16.6-.4L10 5.5l-1-1-6.3 6.3c-.7.7-.7 1.8 0 2.5L9 19.5l1.1-1.1-6.3-6.3c-.2 0-.2-.2-.1-.3z\" />\n\t</SVG>\n);\n\nexport default symbol;\n","/**\n * WordPress dependencies\n */\nimport {\n\thasBlockSupport,\n\tisReusableBlock,\n\tcreateBlock,\n\tserialize,\n} from '@wordpress/blocks';\nimport { store as blockEditorStore } from '@wordpress/block-editor';\nimport { useState, useCallback } from '@wordpress/element';\nimport { MenuItem } from '@wordpress/components';\nimport { symbol } from '@wordpress/icons';\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport { store as coreStore } from '@wordpress/core-data';\nimport { __, sprintf } from '@wordpress/i18n';\nimport { store as noticesStore } from '@wordpress/notices';\n/**\n * Internal dependencies\n */\nimport { store as patternsStore } from '../store';\nimport CreatePatternModal from './create-pattern-modal';\nimport { unlock } from '../lock-unlock';\nimport { PATTERN_SYNC_TYPES } from '../constants';\n\n/**\n * Menu control to convert block(s) to a pattern block.\n *\n * @param {Object}   props              Component props.\n * @param {string[]} props.clientIds    Client ids of selected blocks.\n * @param {string}   props.rootClientId ID of the currently selected top-level block.\n * @return {import('react').ComponentType} The menu control or null.\n */\nexport default function PatternConvertButton( { clientIds, rootClientId } ) {\n\tconst { createSuccessNotice } = useDispatch( noticesStore );\n\tconst { replaceBlocks } = useDispatch( blockEditorStore );\n\t// Ignore reason: false positive of the lint rule.\n\t// eslint-disable-next-line @wordpress/no-unused-vars-before-return\n\tconst { setEditingPattern } = unlock( useDispatch( patternsStore ) );\n\tconst [ isModalOpen, setIsModalOpen ] = useState( false );\n\tconst canConvert = useSelect(\n\t\t( select ) => {\n\t\t\tconst { canUser } = select( coreStore );\n\t\t\tconst {\n\t\t\t\tgetBlocksByClientId,\n\t\t\t\tcanInsertBlockType,\n\t\t\t\tgetBlockRootClientId,\n\t\t\t} = select( blockEditorStore );\n\n\t\t\tconst rootId =\n\t\t\t\trootClientId ||\n\t\t\t\t( clientIds.length > 0\n\t\t\t\t\t? getBlockRootClientId( clientIds[ 0 ] )\n\t\t\t\t\t: undefined );\n\n\t\t\tconst blocks = getBlocksByClientId( clientIds ) ?? [];\n\n\t\t\tconst isReusable =\n\t\t\t\tblocks.length === 1 &&\n\t\t\t\tblocks[ 0 ] &&\n\t\t\t\tisReusableBlock( blocks[ 0 ] ) &&\n\t\t\t\t!! select( coreStore ).getEntityRecord(\n\t\t\t\t\t'postType',\n\t\t\t\t\t'wp_block',\n\t\t\t\t\tblocks[ 0 ].attributes.ref\n\t\t\t\t);\n\n\t\t\tconst _canConvert =\n\t\t\t\t// Hide when this is already a synced pattern.\n\t\t\t\t! isReusable &&\n\t\t\t\t// Hide when patterns are disabled.\n\t\t\t\tcanInsertBlockType( 'core/block', rootId ) &&\n\t\t\t\tblocks.every(\n\t\t\t\t\t( block ) =>\n\t\t\t\t\t\t// Guard against the case where a regular block has *just* been converted.\n\t\t\t\t\t\t!! block &&\n\t\t\t\t\t\t// Hide on invalid blocks.\n\t\t\t\t\t\tblock.isValid &&\n\t\t\t\t\t\t// Hide when block doesn't support being made into a pattern.\n\t\t\t\t\t\thasBlockSupport( block.name, 'reusable', true )\n\t\t\t\t) &&\n\t\t\t\t// Hide when current doesn't have permission to do that.\n\t\t\t\t!! canUser( 'create', 'blocks' );\n\n\t\t\treturn _canConvert;\n\t\t},\n\t\t[ clientIds, rootClientId ]\n\t);\n\tconst { getBlocksByClientId } = useSelect( blockEditorStore );\n\tconst getContent = useCallback(\n\t\t() => serialize( getBlocksByClientId( clientIds ) ),\n\t\t[ getBlocksByClientId, clientIds ]\n\t);\n\n\tif ( ! canConvert ) {\n\t\treturn null;\n\t}\n\n\tconst handleSuccess = ( { pattern } ) => {\n\t\tif ( pattern.wp_pattern_sync_status !== PATTERN_SYNC_TYPES.unsynced ) {\n\t\t\tconst newBlock = createBlock( 'core/block', {\n\t\t\t\tref: pattern.id,\n\t\t\t} );\n\n\t\t\treplaceBlocks( clientIds, newBlock );\n\t\t\tsetEditingPattern( newBlock.clientId, true );\n\t\t}\n\n\t\tcreateSuccessNotice(\n\t\t\tpattern.wp_pattern_sync_status === PATTERN_SYNC_TYPES.unsynced\n\t\t\t\t? sprintf(\n\t\t\t\t\t\t// translators: %s: the name the user has given to the pattern.\n\t\t\t\t\t\t__( 'Unsynced pattern created: %s' ),\n\t\t\t\t\t\tpattern.title.raw\n\t\t\t\t  )\n\t\t\t\t: sprintf(\n\t\t\t\t\t\t// translators: %s: the name the user has given to the pattern.\n\t\t\t\t\t\t__( 'Synced pattern created: %s' ),\n\t\t\t\t\t\tpattern.title.raw\n\t\t\t\t  ),\n\t\t\t{\n\t\t\t\ttype: 'snackbar',\n\t\t\t\tid: 'convert-to-pattern-success',\n\t\t\t}\n\t\t);\n\t\tsetIsModalOpen( false );\n\t};\n\treturn (\n\t\t<>\n\t\t\t<MenuItem\n\t\t\t\ticon={ symbol }\n\t\t\t\tonClick={ () => setIsModalOpen( true ) }\n\t\t\t\taria-expanded={ isModalOpen }\n\t\t\t\taria-haspopup=\"dialog\"\n\t\t\t>\n\t\t\t\t{ __( 'Create pattern' ) }\n\t\t\t</MenuItem>\n\t\t\t{ isModalOpen && (\n\t\t\t\t<CreatePatternModal\n\t\t\t\t\tcontent={ getContent }\n\t\t\t\t\tonSuccess={ ( pattern ) => {\n\t\t\t\t\t\thandleSuccess( pattern );\n\t\t\t\t\t} }\n\t\t\t\t\tonError={ () => {\n\t\t\t\t\t\tsetIsModalOpen( false );\n\t\t\t\t\t} }\n\t\t\t\t\tonClose={ () => {\n\t\t\t\t\t\tsetIsModalOpen( false );\n\t\t\t\t\t} }\n\t\t\t\t/>\n\t\t\t) }\n\t\t</>\n\t);\n}\n","var __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"url\"];","/**\n * WordPress dependencies\n */\nimport { MenuItem } from '@wordpress/components';\nimport { __ } from '@wordpress/i18n';\nimport { isReusableBlock } from '@wordpress/blocks';\nimport { useSelect, useDispatch } from '@wordpress/data';\nimport { store as blockEditorStore } from '@wordpress/block-editor';\nimport { addQueryArgs } from '@wordpress/url';\nimport { store as coreStore } from '@wordpress/core-data';\n\n/**\n * Internal dependencies\n */\nimport { store as patternsStore } from '../store';\nimport { unlock } from '../lock-unlock';\n\nfunction PatternsManageButton( { clientId } ) {\n\tconst { canRemove, isVisible, innerBlockCount, managePatternsUrl } =\n\t\tuseSelect(\n\t\t\t( select ) => {\n\t\t\t\tconst { getBlock, canRemoveBlock, getBlockCount, getSettings } =\n\t\t\t\t\tselect( blockEditorStore );\n\t\t\t\tconst { canUser } = select( coreStore );\n\t\t\t\tconst reusableBlock = getBlock( clientId );\n\t\t\t\tconst isBlockTheme = getSettings().__unstableIsBlockBasedTheme;\n\n\t\t\t\treturn {\n\t\t\t\t\tcanRemove: canRemoveBlock( clientId ),\n\t\t\t\t\tisVisible:\n\t\t\t\t\t\t!! reusableBlock &&\n\t\t\t\t\t\tisReusableBlock( reusableBlock ) &&\n\t\t\t\t\t\t!! canUser(\n\t\t\t\t\t\t\t'update',\n\t\t\t\t\t\t\t'blocks',\n\t\t\t\t\t\t\treusableBlock.attributes.ref\n\t\t\t\t\t\t),\n\t\t\t\t\tinnerBlockCount: getBlockCount( clientId ),\n\t\t\t\t\t// The site editor and templates both check whether the user\n\t\t\t\t\t// has edit_theme_options capabilities. We can leverage that here\n\t\t\t\t\t// and omit the manage patterns link if the user can't access it.\n\t\t\t\t\tmanagePatternsUrl:\n\t\t\t\t\t\tisBlockTheme && canUser( 'read', 'templates' )\n\t\t\t\t\t\t\t? addQueryArgs( 'site-editor.php', {\n\t\t\t\t\t\t\t\t\tpath: '/patterns',\n\t\t\t\t\t\t\t  } )\n\t\t\t\t\t\t\t: addQueryArgs( 'edit.php', {\n\t\t\t\t\t\t\t\t\tpost_type: 'wp_block',\n\t\t\t\t\t\t\t  } ),\n\t\t\t\t};\n\t\t\t},\n\t\t\t[ clientId ]\n\t\t);\n\n\t// Ignore reason: false positive of the lint rule.\n\t// eslint-disable-next-line @wordpress/no-unused-vars-before-return\n\tconst { convertSyncedPatternToStatic } = unlock(\n\t\tuseDispatch( patternsStore )\n\t);\n\n\tif ( ! isVisible ) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t{ canRemove && (\n\t\t\t\t<MenuItem\n\t\t\t\t\tonClick={ () => convertSyncedPatternToStatic( clientId ) }\n\t\t\t\t>\n\t\t\t\t\t{ innerBlockCount > 1\n\t\t\t\t\t\t? __( 'Detach patterns' )\n\t\t\t\t\t\t: __( 'Detach pattern' ) }\n\t\t\t\t</MenuItem>\n\t\t\t) }\n\t\t\t<MenuItem href={ managePatternsUrl }>\n\t\t\t\t{ __( 'Manage patterns' ) }\n\t\t\t</MenuItem>\n\t\t</>\n\t);\n}\n\nexport default PatternsManageButton;\n","var __WEBPACK_NAMESPACE_OBJECT__ = window[\"wp\"][\"a11y\"];","/**\n * Internal dependencies\n */\nimport { lock } from './lock-unlock';\nimport CreatePatternModal from './components/create-pattern-modal';\nimport DuplicatePatternModal from './components/duplicate-pattern-modal';\nimport RenamePatternModal from './components/rename-pattern-modal';\nimport PatternsMenuItems from './components';\nimport RenamePatternCategoryModal from './components/rename-pattern-category-modal';\nimport {\n\tPATTERN_TYPES,\n\tPATTERN_DEFAULT_CATEGORY,\n\tPATTERN_USER_CATEGORY,\n\tEXCLUDED_PATTERN_SOURCES,\n\tPATTERN_SYNC_TYPES,\n} from './constants';\n\nexport const privateApis = {};\nlock( privateApis, {\n\tCreatePatternModal,\n\tDuplicatePatternModal,\n\tRenamePatternModal,\n\tPatternsMenuItems,\n\tRenamePatternCategoryModal,\n\tPATTERN_TYPES,\n\tPATTERN_DEFAULT_CATEGORY,\n\tPATTERN_USER_CATEGORY,\n\tEXCLUDED_PATTERN_SOURCES,\n\tPATTERN_SYNC_TYPES,\n} );\n","/**\n * WordPress dependencies\n */\nimport {\n\tButton,\n\tModal,\n\tTextControl,\n\t__experimentalHStack as HStack,\n\t__experimentalVStack as VStack,\n} from '@wordpress/components';\nimport { store as coreStore } from '@wordpress/core-data';\nimport { useDispatch } from '@wordpress/data';\nimport { useState } from '@wordpress/element';\nimport { decodeEntities } from '@wordpress/html-entities';\nimport { __ } from '@wordpress/i18n';\nimport { store as noticesStore } from '@wordpress/notices';\n\nexport default function RenamePatternModal( {\n\tonClose,\n\tonError,\n\tonSuccess,\n\tpattern,\n\t...props\n} ) {\n\tconst originalName = decodeEntities( pattern.title );\n\tconst [ name, setName ] = useState( originalName );\n\tconst [ isSaving, setIsSaving ] = useState( false );\n\n\tconst {\n\t\teditEntityRecord,\n\t\t__experimentalSaveSpecifiedEntityEdits: saveSpecifiedEntityEdits,\n\t} = useDispatch( coreStore );\n\n\tconst { createSuccessNotice, createErrorNotice } =\n\t\tuseDispatch( noticesStore );\n\n\tconst onRename = async ( event ) => {\n\t\tevent.preventDefault();\n\n\t\tif ( ! name || name === pattern.title || isSaving ) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tawait editEntityRecord( 'postType', pattern.type, pattern.id, {\n\t\t\t\ttitle: name,\n\t\t\t} );\n\n\t\t\tsetIsSaving( true );\n\t\t\tsetName( '' );\n\t\t\tonClose?.();\n\n\t\t\tconst savedRecord = await saveSpecifiedEntityEdits(\n\t\t\t\t'postType',\n\t\t\t\tpattern.type,\n\t\t\t\tpattern.id,\n\t\t\t\t[ 'title' ],\n\t\t\t\t{ throwOnError: true }\n\t\t\t);\n\n\t\t\tonSuccess?.( savedRecord );\n\n\t\t\tcreateSuccessNotice( __( 'Pattern renamed' ), {\n\t\t\t\ttype: 'snackbar',\n\t\t\t\tid: 'pattern-update',\n\t\t\t} );\n\t\t} catch ( error ) {\n\t\t\tonError?.();\n\n\t\t\tconst errorMessage =\n\t\t\t\terror.message && error.code !== 'unknown_error'\n\t\t\t\t\t? error.message\n\t\t\t\t\t: __( 'An error occurred while renaming the pattern.' );\n\n\t\t\tcreateErrorNotice( errorMessage, {\n\t\t\t\ttype: 'snackbar',\n\t\t\t\tid: 'pattern-update',\n\t\t\t} );\n\t\t} finally {\n\t\t\tsetIsSaving( false );\n\t\t\tsetName( '' );\n\t\t}\n\t};\n\n\tconst onRequestClose = () => {\n\t\tonClose?.();\n\t\tsetName( '' );\n\t};\n\n\treturn (\n\t\t<Modal title={ __( 'Rename' ) } { ...props } onRequestClose={ onClose }>\n\t\t\t<form onSubmit={ onRename }>\n\t\t\t\t<VStack spacing=\"5\">\n\t\t\t\t\t<TextControl\n\t\t\t\t\t\t__nextHasNoMarginBottom\n\t\t\t\t\t\tlabel={ __( 'Name' ) }\n\t\t\t\t\t\tvalue={ name }\n\t\t\t\t\t\tonChange={ setName }\n\t\t\t\t\t\trequired\n\t\t\t\t\t/>\n\n\t\t\t\t\t<HStack justify=\"right\">\n\t\t\t\t\t\t<Button variant=\"tertiary\" onClick={ onRequestClose }>\n\t\t\t\t\t\t\t{ __( 'Cancel' ) }\n\t\t\t\t\t\t</Button>\n\n\t\t\t\t\t\t<Button variant=\"primary\" type=\"submit\">\n\t\t\t\t\t\t\t{ __( 'Save' ) }\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</HStack>\n\t\t\t\t</VStack>\n\t\t\t</form>\n\t\t</Modal>\n\t);\n}\n","/**\n * WordPress dependencies\n */\nimport { BlockSettingsMenuControls } from '@wordpress/block-editor';\n\n/**\n * Internal dependencies\n */\nimport PatternConvertButton from './pattern-convert-button';\nimport PatternsManageButton from './patterns-manage-button';\n\nexport default function PatternsMenuItems( { rootClientId } ) {\n\treturn (\n\t\t<BlockSettingsMenuControls>\n\t\t\t{ ( { selectedClientIds } ) => (\n\t\t\t\t<>\n\t\t\t\t\t<PatternConvertButton\n\t\t\t\t\t\tclientIds={ selectedClientIds }\n\t\t\t\t\t\trootClientId={ rootClientId }\n\t\t\t\t\t/>\n\t\t\t\t\t{ selectedClientIds.length === 1 && (\n\t\t\t\t\t\t<PatternsManageButton\n\t\t\t\t\t\t\tclientId={ selectedClientIds[ 0 ] }\n\t\t\t\t\t\t/>\n\t\t\t\t\t) }\n\t\t\t\t</>\n\t\t\t) }\n\t\t</BlockSettingsMenuControls>\n\t);\n}\n","/**\n * WordPress dependencies\n */\nimport {\n\tModal,\n\tButton,\n\tTextControl,\n\t__experimentalHStack as HStack,\n\t__experimentalVStack as VStack,\n} from '@wordpress/components';\nimport { store as coreStore } from '@wordpress/core-data';\nimport { useDispatch } from '@wordpress/data';\nimport { useId, useRef, useState } from '@wordpress/element';\nimport { decodeEntities } from '@wordpress/html-entities';\nimport { __ } from '@wordpress/i18n';\nimport { store as noticesStore } from '@wordpress/notices';\nimport { speak } from '@wordpress/a11y';\n\n/**\n * Internal dependencies\n */\nimport { CATEGORY_SLUG } from './category-selector';\n\nexport default function RenamePatternCategoryModal( {\n\tcategory,\n\texistingCategories,\n\tonClose,\n\tonError,\n\tonSuccess,\n\t...props\n} ) {\n\tconst id = useId();\n\tconst textControlRef = useRef();\n\tconst [ name, setName ] = useState( decodeEntities( category.name ) );\n\tconst [ isSaving, setIsSaving ] = useState( false );\n\tconst [ validationMessage, setValidationMessage ] = useState( false );\n\tconst validationMessageId = validationMessage\n\t\t? `patterns-rename-pattern-category-modal__validation-message-${ id }`\n\t\t: undefined;\n\n\tconst { saveEntityRecord, invalidateResolution } = useDispatch( coreStore );\n\tconst { createErrorNotice, createSuccessNotice } =\n\t\tuseDispatch( noticesStore );\n\n\tconst onChange = ( newName ) => {\n\t\tif ( validationMessage ) {\n\t\t\tsetValidationMessage( undefined );\n\t\t}\n\t\tsetName( newName );\n\t};\n\n\tconst onSave = async ( event ) => {\n\t\tevent.preventDefault();\n\n\t\tif ( isSaving ) {\n\t\t\treturn;\n\t\t}\n\n\t\tif ( ! name || name === category.name ) {\n\t\t\tconst message = __( 'Please enter a new name for this category.' );\n\t\t\tspeak( message, 'assertive' );\n\t\t\tsetValidationMessage( message );\n\t\t\ttextControlRef.current?.focus();\n\t\t\treturn;\n\t\t}\n\n\t\t// Check existing categories to avoid creating duplicates.\n\t\tif (\n\t\t\texistingCategories.patternCategories.find( ( existingCategory ) => {\n\t\t\t\t// Compare the id so that the we don't disallow the user changing the case of their current category\n\t\t\t\t// (i.e. renaming 'test' to 'Test').\n\t\t\t\treturn (\n\t\t\t\t\texistingCategory.id !== category.id &&\n\t\t\t\t\texistingCategory.label.toLowerCase() === name.toLowerCase()\n\t\t\t\t);\n\t\t\t} )\n\t\t) {\n\t\t\tconst message = __(\n\t\t\t\t'This category already exists. Please use a different name.'\n\t\t\t);\n\t\t\tspeak( message, 'assertive' );\n\t\t\tsetValidationMessage( message );\n\t\t\ttextControlRef.current?.focus();\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tsetIsSaving( true );\n\n\t\t\t// User pattern category properties may differ as they can be\n\t\t\t// normalized for use alongside template part areas, core pattern\n\t\t\t// categories etc. As a result we won't just destructure the passed\n\t\t\t// category object.\n\t\t\tconst savedRecord = await saveEntityRecord(\n\t\t\t\t'taxonomy',\n\t\t\t\tCATEGORY_SLUG,\n\t\t\t\t{\n\t\t\t\t\tid: category.id,\n\t\t\t\t\tslug: category.slug,\n\t\t\t\t\tname,\n\t\t\t\t}\n\t\t\t);\n\n\t\t\tinvalidateResolution( 'getUserPatternCategories' );\n\t\t\tonSuccess?.( savedRecord );\n\t\t\tonClose();\n\n\t\t\tcreateSuccessNotice( __( 'Pattern category renamed.' ), {\n\t\t\t\ttype: 'snackbar',\n\t\t\t\tid: 'pattern-category-update',\n\t\t\t} );\n\t\t} catch ( error ) {\n\t\t\tonError?.();\n\t\t\tcreateErrorNotice( error.message, {\n\t\t\t\ttype: 'snackbar',\n\t\t\t\tid: 'pattern-category-update',\n\t\t\t} );\n\t\t} finally {\n\t\t\tsetIsSaving( false );\n\t\t\tsetName( '' );\n\t\t}\n\t};\n\n\tconst onRequestClose = () => {\n\t\tonClose();\n\t\tsetName( '' );\n\t};\n\n\treturn (\n\t\t<Modal\n\t\t\ttitle={ __( 'Rename' ) }\n\t\t\tonRequestClose={ onRequestClose }\n\t\t\t{ ...props }\n\t\t>\n\t\t\t<form onSubmit={ onSave }>\n\t\t\t\t<VStack spacing=\"5\">\n\t\t\t\t\t<VStack spacing=\"2\">\n\t\t\t\t\t\t<TextControl\n\t\t\t\t\t\t\tref={ textControlRef }\n\t\t\t\t\t\t\t__nextHasNoMarginBottom\n\t\t\t\t\t\t\tlabel={ __( 'Name' ) }\n\t\t\t\t\t\t\tvalue={ name }\n\t\t\t\t\t\t\tonChange={ onChange }\n\t\t\t\t\t\t\taria-describedby={ validationMessageId }\n\t\t\t\t\t\t\trequired\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t{ validationMessage && (\n\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\tclassName=\"patterns-rename-pattern-category-modal__validation-message\"\n\t\t\t\t\t\t\t\tid={ validationMessageId }\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{ validationMessage }\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t) }\n\t\t\t\t\t</VStack>\n\t\t\t\t\t<HStack justify=\"right\">\n\t\t\t\t\t\t<Button variant=\"tertiary\" onClick={ onRequestClose }>\n\t\t\t\t\t\t\t{ __( 'Cancel' ) }\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\tvariant=\"primary\"\n\t\t\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\t\t\taria-disabled={\n\t\t\t\t\t\t\t\t! name || name === category.name || isSaving\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tisBusy={ isSaving }\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{ __( 'Save' ) }\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</HStack>\n\t\t\t\t</VStack>\n\t\t\t</form>\n\t\t</Modal>\n\t);\n}\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","window","combineReducers","isEditingPattern","state","action","type","clientId","isEditing","PATTERN_DEFAULT_CATEGORY","PATTERN_SYNC_TYPES","full","unsynced","createPattern","title","syncType","content","categories","async","registry","meta","wp_pattern_sync_status","undefined","reusableBlock","status","wp_pattern_category","dispatch","coreStore","saveEntityRecord","createPatternFromFile","file","fileContent","text","parsedContent","JSON","parse","e","Error","__file","syncStatus","convertSyncedPatternToStatic","oldBlock","select","blockEditorStore","getBlock","pattern","getEditedEntityRecord","attributes","ref","newBlocks","replaceBlocks","setEditingPattern","lock","unlock","__dangerousOptInToUnstableAPIsOnlyForCoreModules","storeConfig","reducer","store","createReduxStore","register","registerPrivateActions","actions","registerPrivateSelectors","selectors","unescapeString","arg","decodeEntities","CATEGORY_SLUG","CategorySelector","categoryTerms","onChange","categoryMap","search","setSearch","useState","debouncedSearch","useDebounce","suggestions","useMemo","Array","from","values","map","category","label","filter","toLowerCase","includes","sort","a","b","localeCompare","createElement","FormTokenField","className","termNames","uniqueTerms","reduce","terms","newTerm","some","term","push","onInputChange","__","tokenizeOnBlur","__experimentalExpandOnFocus","__next40pxDefaultSize","CreatePatternModal","confirmLabel","defaultCategories","modalTitle","onClose","onError","onSuccess","defaultSyncType","defaultTitle","setSyncType","setCategoryTerms","setTitle","isSaving","setIsSaving","useDispatch","patternsStore","invalidateResolution","createErrorNotice","noticesStore","corePatternCategories","userPatternCategories","useSelect","getUserPatternCategories","getBlockPatternCategories","uniqueCategories","Map","forEach","has","name","set","Modal","onRequestClose","overlayClassName","onSubmit","event","preventDefault","patternTitle","sync","Promise","all","termName","existingTerm","termData","slug","throwOnError","id","error","code","data","term_id","findOrCreateTerm","newPattern","categoryId","message","onCreate","VStack","spacing","TextControl","__nextHasNoMarginBottom","placeholder","ToggleControl","_x","help","checked","HStack","justify","Button","variant","onClick","isBusy","getTermLabels","user","core","SVG","xmlns","viewBox","Path","d","PatternConvertButton","clientIds","rootClientId","createSuccessNotice","isModalOpen","setIsModalOpen","canConvert","_getBlocksByClientId","canUser","getBlocksByClientId","canInsertBlockType","getBlockRootClientId","rootId","length","blocks","isReusableBlock","getEntityRecord","every","block","isValid","hasBlockSupport","getContent","useCallback","serialize","Fragment","MenuItem","icon","symbol","handleSuccess","newBlock","createBlock","sprintf","raw","canRemove","isVisible","innerBlockCount","managePatternsUrl","canRemoveBlock","getBlockCount","getSettings","isBlockTheme","__unstableIsBlockBasedTheme","addQueryArgs","path","post_type","href","privateApis","DuplicatePatternModal","duplicatedProps","RenamePatternModal","props","originalName","setName","editEntityRecord","__experimentalSaveSpecifiedEntityEdits","saveSpecifiedEntityEdits","savedRecord","errorMessage","required","PatternsMenuItems","BlockSettingsMenuControls","selectedClientIds","PatternsManageButton","RenamePatternCategoryModal","existingCategories","useId","textControlRef","useRef","validationMessage","setValidationMessage","validationMessageId","speak","current","focus","patternCategories","find","existingCategory","newName","PATTERN_TYPES","theme","PATTERN_USER_CATEGORY","EXCLUDED_PATTERN_SOURCES"],"sourceRoot":""}