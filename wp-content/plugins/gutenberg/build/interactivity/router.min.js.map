{"version":3,"file":"./build/interactivity/router.min.js","mappings":"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","sources":["webpack://wp/webpack/bootstrap","webpack://wp/webpack/runtime/define property getters","webpack://wp/webpack/runtime/hasOwnProperty shorthand","webpack://wp/external module \"@wordpress/interactivity\"","webpack://wp/@wordpress/interactivity-router/src/index.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","var x = y => { var x = {}; __webpack_require__.d(x, y); return x; }\nvar y = x => () => x\nconst __WEBPACK_NAMESPACE_OBJECT__ = x({ [\"getConfig\"]: () => __WEBPACK_EXTERNAL_MODULE__wordpress_interactivity_8e89b257__.getConfig, [\"privateApis\"]: () => __WEBPACK_EXTERNAL_MODULE__wordpress_interactivity_8e89b257__.privateApis, [\"store\"]: () => __WEBPACK_EXTERNAL_MODULE__wordpress_interactivity_8e89b257__.store });","/**\n * WordPress dependencies\n */\nimport { store, privateApis, getConfig } from '@wordpress/interactivity';\n\nconst { directivePrefix, getRegionRootFragment, initialVdom, toVdom, render } =\n\tprivateApis(\n\t\t'I acknowledge that using private APIs means my theme or plugin will inevitably break in the next version of WordPress.'\n\t);\n\n// The cache of visited and prefetched pages.\nconst pages = new Map();\n\n// Helper to remove domain and hash from the URL. We are only interesting in\n// caching the path and the query.\nconst getPagePath = ( url ) => {\n\tconst u = new URL( url, window.location );\n\treturn u.pathname + u.search;\n};\n\n// Fetch a new page and convert it to a static virtual DOM.\nconst fetchPage = async ( url, { html } ) => {\n\ttry {\n\t\tif ( ! html ) {\n\t\t\tconst res = await window.fetch( url );\n\t\t\tif ( res.status !== 200 ) return false;\n\t\t\thtml = await res.text();\n\t\t}\n\t\tconst dom = new window.DOMParser().parseFromString( html, 'text/html' );\n\t\treturn regionsToVdom( dom );\n\t} catch ( e ) {\n\t\treturn false;\n\t}\n};\n\n// Return an object with VDOM trees of those HTML regions marked with a\n// `router-region` directive.\nconst regionsToVdom = ( dom, { vdom } = {} ) => {\n\tconst regions = {};\n\tconst attrName = `data-${ directivePrefix }-router-region`;\n\tdom.querySelectorAll( `[${ attrName }]` ).forEach( ( region ) => {\n\t\tconst id = region.getAttribute( attrName );\n\t\tregions[ id ] = vdom?.has( region )\n\t\t\t? vdom.get( region )\n\t\t\t: toVdom( region );\n\t} );\n\tconst title = dom.querySelector( 'title' )?.innerText;\n\treturn { regions, title };\n};\n\n// Render all interactive regions contained in the given page.\nconst renderRegions = ( page ) => {\n\tconst attrName = `data-${ directivePrefix }-router-region`;\n\tdocument.querySelectorAll( `[${ attrName }]` ).forEach( ( region ) => {\n\t\tconst id = region.getAttribute( attrName );\n\t\tconst fragment = getRegionRootFragment( region );\n\t\trender( page.regions[ id ], fragment );\n\t} );\n\tif ( page.title ) {\n\t\tdocument.title = page.title;\n\t}\n};\n\n/**\n * Load the given page forcing a full page reload.\n *\n * The function returns a promise that won't resolve, useful to prevent any\n * potential feedback indicating that the navigation has finished while the new\n * page is being loaded.\n *\n * @param {string} href The page href.\n * @return {Promise} Promise that never resolves.\n */\nconst forcePageReload = ( href ) => {\n\twindow.location.assign( href );\n\treturn new Promise( () => {} );\n};\n\n// Listen to the back and forward buttons and restore the page if it's in the\n// cache.\nwindow.addEventListener( 'popstate', async () => {\n\tconst pagePath = getPagePath( window.location ); // Remove hash.\n\tconst page = pages.has( pagePath ) && ( await pages.get( pagePath ) );\n\tif ( page ) {\n\t\trenderRegions( page );\n\t\t// Update the URL in the state.\n\t\tstate.url = window.location.href;\n\t} else {\n\t\twindow.location.reload();\n\t}\n} );\n\n// Cache the initial page using the intially parsed vDOM.\npages.set(\n\tgetPagePath( window.location ),\n\tPromise.resolve( regionsToVdom( document, { vdom: initialVdom } ) )\n);\n\n// Variable to store the current navigation.\nlet navigatingTo = '';\n\nexport const { state, actions } = store( 'core/router', {\n\tstate: {\n\t\turl: window.location.href,\n\t\tnavigation: {\n\t\t\thasStarted: false,\n\t\t\thasFinished: false,\n\t\t\ttexts: {},\n\t\t},\n\t},\n\tactions: {\n\t\t/**\n\t\t * Navigates to the specified page.\n\t\t *\n\t\t * This function normalizes the passed href, fetchs the page HTML if\n\t\t * needed, and updates any interactive regions whose contents have\n\t\t * changed. It also creates a new entry in the browser session history.\n\t\t *\n\t\t * @param {string}  href                               The page href.\n\t\t * @param {Object}  [options]                          Options object.\n\t\t * @param {boolean} [options.force]                    If true, it forces re-fetching the URL.\n\t\t * @param {string}  [options.html]                     HTML string to be used instead of fetching the requested URL.\n\t\t * @param {boolean} [options.replace]                  If true, it replaces the current entry in the browser session history.\n\t\t * @param {number}  [options.timeout]                  Time until the navigation is aborted, in milliseconds. Default is 10000.\n\t\t * @param {boolean} [options.loadingAnimation]         Whether an animation should be shown while navigating. Default to `true`.\n\t\t * @param {boolean} [options.screenReaderAnnouncement] Whether a message for screen readers should be announced while navigating. Default to `true`.\n\t\t *\n\t\t * @return {Promise} Promise that resolves once the navigation is completed or aborted.\n\t\t */\n\t\t*navigate( href, options = {} ) {\n\t\t\tconst { clientNavigationDisabled } = getConfig();\n\t\t\tif ( clientNavigationDisabled ) {\n\t\t\t\tyield forcePageReload( href );\n\t\t\t}\n\n\t\t\tconst pagePath = getPagePath( href );\n\t\t\tconst { navigation } = state;\n\t\t\tconst {\n\t\t\t\tloadingAnimation = true,\n\t\t\t\tscreenReaderAnnouncement = true,\n\t\t\t\ttimeout = 10000,\n\t\t\t} = options;\n\n\t\t\tnavigatingTo = href;\n\t\t\tactions.prefetch( pagePath, options );\n\n\t\t\t// Create a promise that resolves when the specified timeout ends.\n\t\t\t// The timeout value is 10 seconds by default.\n\t\t\tconst timeoutPromise = new Promise( ( resolve ) =>\n\t\t\t\tsetTimeout( resolve, timeout )\n\t\t\t);\n\n\t\t\t// Don't update the navigation status immediately, wait 400 ms.\n\t\t\tconst loadingTimeout = setTimeout( () => {\n\t\t\t\tif ( navigatingTo !== href ) return;\n\n\t\t\t\tif ( loadingAnimation ) {\n\t\t\t\t\tnavigation.hasStarted = true;\n\t\t\t\t\tnavigation.hasFinished = false;\n\t\t\t\t}\n\t\t\t\tif ( screenReaderAnnouncement ) {\n\t\t\t\t\tnavigation.message = navigation.texts.loading;\n\t\t\t\t}\n\t\t\t}, 400 );\n\n\t\t\tconst page = yield Promise.race( [\n\t\t\t\tpages.get( pagePath ),\n\t\t\t\ttimeoutPromise,\n\t\t\t] );\n\n\t\t\t// Dismiss loading message if it hasn't been added yet.\n\t\t\tclearTimeout( loadingTimeout );\n\n\t\t\t// Once the page is fetched, the destination URL could have changed\n\t\t\t// (e.g., by clicking another link in the meantime). If so, bail\n\t\t\t// out, and let the newer execution to update the HTML.\n\t\t\tif ( navigatingTo !== href ) return;\n\n\t\t\tif ( page ) {\n\t\t\t\trenderRegions( page );\n\t\t\t\twindow.history[\n\t\t\t\t\toptions.replace ? 'replaceState' : 'pushState'\n\t\t\t\t]( {}, '', href );\n\n\t\t\t\t// Update the URL in the state.\n\t\t\t\tstate.url = href;\n\n\t\t\t\t// Update the navigation status once the the new page rendering\n\t\t\t\t// has been completed.\n\t\t\t\tif ( loadingAnimation ) {\n\t\t\t\t\tnavigation.hasStarted = false;\n\t\t\t\t\tnavigation.hasFinished = true;\n\t\t\t\t}\n\n\t\t\t\tif ( screenReaderAnnouncement ) {\n\t\t\t\t\t// Announce that the page has been loaded. If the message is the\n\t\t\t\t\t// same, we use a no-break space similar to the @wordpress/a11y\n\t\t\t\t\t// package: https://github.com/WordPress/gutenberg/blob/c395242b8e6ee20f8b06c199e4fc2920d7018af1/packages/a11y/src/filter-message.js#L20-L26\n\t\t\t\t\tnavigation.message =\n\t\t\t\t\t\tnavigation.texts.loaded +\n\t\t\t\t\t\t( navigation.message === navigation.texts.loaded\n\t\t\t\t\t\t\t? '\\u00A0'\n\t\t\t\t\t\t\t: '' );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tyield forcePageReload( href );\n\t\t\t}\n\t\t},\n\n\t\t/**\n\t\t * Prefetchs the page with the passed URL.\n\t\t *\n\t\t * The function normalizes the URL and stores internally the fetch\n\t\t * promise, to avoid triggering a second fetch for an ongoing request.\n\t\t *\n\t\t * @param {string}  url             The page URL.\n\t\t * @param {Object}  [options]       Options object.\n\t\t * @param {boolean} [options.force] Force fetching the URL again.\n\t\t * @param {string}  [options.html]  HTML string to be used instead of\n\t\t *                                  fetching the requested URL.\n\t\t */\n\t\tprefetch( url, options = {} ) {\n\t\t\tconst { clientNavigationDisabled } = getConfig();\n\t\t\tif ( clientNavigationDisabled ) return;\n\n\t\t\tconst pagePath = getPagePath( url );\n\t\t\tif ( options.force || ! pages.has( pagePath ) ) {\n\t\t\t\tpages.set( pagePath, fetchPage( pagePath, options ) );\n\t\t\t}\n\t\t},\n\t},\n} );\n"],"names":["__webpack_require__","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","y","__WEBPACK_EXTERNAL_MODULE__wordpress_interactivity_8e89b257__","getConfig","privateApis","store","x","d","directivePrefix","getRegionRootFragment","initialVdom","toVdom","render","pages","Map","getPagePath","url","u","URL","window","location","pathname","search","regionsToVdom","dom","vdom","regions","attrName","querySelectorAll","forEach","region","id","getAttribute","has","title","querySelector","innerText","renderRegions","page","document","fragment","forcePageReload","href","assign","Promise","addEventListener","async","pagePath","state","reload","set","resolve","navigatingTo","actions","navigation","hasStarted","hasFinished","texts","navigate","options","clientNavigationDisabled","loadingAnimation","screenReaderAnnouncement","timeout","prefetch","timeoutPromise","setTimeout","loadingTimeout","message","loading","race","clearTimeout","history","replace","loaded","force","html","res","fetch","status","text","DOMParser","parseFromString","e","fetchPage"],"sourceRoot":""}